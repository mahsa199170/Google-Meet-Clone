import UserModel from "../models/Links.js";
import uuid from "../utiles/uuid.js";


const {roomName} = req.body;
const generateLink = ({roomName}) =>{
    const link = `api/add/room/${roomName}/${uuid}`
    return link;
}
// ###############

// ???this function is for retreieving room information from database using .find() method

// export const  getLink = async (req,res) => {
//     try { 
//         const {link} = req.params; //got from gp
//         // we created a room model with name filed and link field, inside the models/Users.js, and here we are just retrieving the link from the room model inside the database, to display it on the screen
//         // const userdata = await UserModel.findOne({name: roomName}).select("link")
//         const userdata = await UserModel.findOne({link}) //got gfrom gp


//         // now we need our function return something
//         res.status(200).json(userdata);

//     } catch(error) {
//         res.status(404).json({message: error.message});
//     }
// }

// ####################

// implement logic for adding different users( creation of new users in the database.)
//***************************************** */
// How the createLink function works
    // The function first extracts the roomName from the request body using destructuring. It then generates a unique link using a custom generateLink function.
    // A new user room is then created using the UserModel schema and the roomName and link values.
    // The try block attempts to save the newly created room to the database using room.save(). If the save operation is successful, the function sends a JSON response with the room object and an HTTP status code of 201 (created). If there is an error during the save operation, the function sends a JSON response with the error message and an HTTP status code of 409 (conflict).
    // It means that if the save operation to the database is successful (i.e., the room object is successfully saved to the database), the function will send a JSON response to the client with the room object.
    // In this case, the response status code is set to 201 which means "Created", indicating that the server has successfully created a new resource (in this case, a new room in the database). The room object is sent in the response body as a JSON object.
    // the example of the json pbject response send to the front is forexample:
    // {
    //     "_id": "617433e83e4d99847e96e0f3",
    //     "roomName": "example room",
    //     "link": "https://example.com/123456",
    //     "__v": 0
    //   }
    // which is the room object added to teh database and then send back to the clinet.
    // his JSON response includes the saved room object, which contains an _id field that is automatically generated by MongoDB, the roomName and link fields that were provided in the request, and a __v field that indicates the version of the document in the database.
    // In this code, when the room object is successfully saved in the database, the function sends a JSON response with the room object back to the client. Since the room object contains the generated link, the client can access this link from the response and use it as needed(forexample here disply on screen or save to clipboard).
    // For example, in this you provided earlier, the client may want to display the generated link to the user, so they would need to receive this link from the server in the response.
    //  in our application, when user in front using tool such as axios or fetch, post a request to the /createLink endpoint with the json payload containingthe roomName.once the server generated the link and save it to the database, it send back a json response with the room object which contains the roomName and generated link. then the client in front can extract teh link from the response data and display it to the user 
//***************************************** */

// the purpose of returning the link in the createLink function is to send the generated link back to the client so that it can be displayed and copied to the user's clipboard.

export const createLink = async (req,res) => {

// here we are getting the roomName from body,( from front)
    const {roomName, id, signalData} = req.body;
    const link = generateLink();  //implement our own function for generating link

    const room = new UserModel({roomName,link, signalData});

    try {
        await room.save();

        res.status(201).json(room);
    } catch (error) {
        res.status(409).json({message: error.message});
        
    }
}


//**** if we want to get the URL parameter from the fron we forxample write: const {id} = req.params but if we want to get forexample and id from the body in fron, we say const {id} = req.body;

// SignalData:

// The signalData typically contains information related to WebRTC signaling. In a WebRTC connection, signaling is the process of exchanging information between two peers to establish a connection.
// In the context of a video call, signalData would contain information like the session description protocol (SDP), ICE candidates, and other details required to establish and maintain the connection between the two peers.
// The signalData is usually created on the client-side using a WebRTC library such as SimpleWebRTC, RTCPeerConnection, or Socket.IO. Once created, the signalData is typically sent to the server to be stored or relayed to the other peer.




// ???this function is for retreieving room information from database using .find() method
// The purpose of the getLink function is to retrieve the room details from the database using the link parameter provided in the URL.
// [this is for getting the link (i mean that unique id from database, then to use it for differnt purpose, forexample pass it to the Socket.io)]
export const  getLink = async (req,res) => {
    try { 
        const {id} = req.params; //this id is the id coming from router.get("/get-room-id/:id", getLink); 
        // we created a room model with name filed and link field, inside the models/Users.js, and here we are just retrieving the link from the room model inside the database, to display it on the screen
        // const userdata = await UserModel.findOne({name: roomName}).select("link")
        const roomId = await UserModel.findOne({link})


        // now we need our function return something
        res.status(200).json(roomId);

    } catch(error) {
        res.status(404).json({message: error.message});
    }
}



// NOTE:

// In the URL http://example.com/room/:link, the colon : indicates that it is a URL parameter. 
// Whatever value comes after the colon is considered as the parameter name
// so when we say const {link} = req.params it will grab any value after :
// n Express.js, when you define a route with a parameter using a colon (e.g., /:link), any value that comes after the slash will be interpreted as the value of that parameter. For example, if the URL is http://example.com/abc123, then req.params.link will be equal to "abc123".
// The curly braces around link in the const { link } = req.params line is called object destructuring, which allows you to extract the value of a property from an object and assign it to a new variable with the same name as the property. In this case, it allows you to extract the value of the link parameter from the req.params object and assign it to a new variable called link.