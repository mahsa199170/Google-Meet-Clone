io.on("connection", (socket) => {   
	socket.emit("me", socket.id)  //In this line of code, the "me" event is being emitted from the server to the clinet using socket.emit(). The socket.id is passed as a parameter along with the event name "me", which can be accessed on the client side when the "me" event is received by the server.(socket.on("me", ))
// This allows the server to send the client's unique socket ID back to the client, which can then be used for further communication between the client and the server

	socket.on("disconnect", () => {
		socket.broadcast.emit("callEnded")
	})

	socket.on("callUser", (data) => {
		io.to(data.userToCall).emit("callUser", { signal: data.signalData, from: data.from, name: data.name })
	})

	socket.on("answerCall", (data) => {
		io.to(data.to).emit("callAccepted", data.signal)
	})
})

server.listen(5000, () => console.log("server is running on port 5000"))



clienside:

useEffect(() => {
    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {
        setStream(stream)
            myVideo.current.srcObject = stream
    })

socket.on("me", (id) => {  //When the me event is emitted from the server, the client receives its own id as a parameter. The setMe() function is then called with this id value as an argument, which updates the id variable in the component's state.
                          // By setting the state of id, any changes to it will trigger a re-render of the component, causing the component to reflect the updated state. In this case, setting the state of id allows the client to know its own ID, which is needed for making calls and handling other signaling events.
        setMe(id)
    })

    socket.on("callUser", (data) => {
        setReceivingCall(true)
        setCaller(data.from)
        setName(data.name)
        setCallerSignal(data.signal)
    })
}, [])

const callUser = (id) => {
    const peer = new Peer({
        initiator: true,
        trickle: false,
        stream: stream
    })
    peer.on("signal", (data) => {
        socket.emit("callUser", {
            userToCall: id,
            signalData: data,
            from: me,
            name: name
        })
    })
    peer.on("stream", (stream) => {
        
            userVideo.current.srcObject = stream
        
    })
    socket.on("callAccepted", (signal) => {
        setCallAccepted(true)
        peer.signal(signal)
    })

    connectionRef.current = peer
}

const answerCall =() =>  {
    setCallAccepted(true)
    const peer = new Peer({
        initiator: false,
        trickle: false,
        stream: stream
    })
    peer.on("signal", (data) => {
        socket.emit("answerCall", { signal: data, to: caller })
    })
    peer.on("stream", (stream) => {
        userVideo.current.srcObject = stream
    })

    peer.signal(callerSignal)
    connectionRef.current = peer
}

const leaveCall = () => {
    setCallEnded(true)
    connectionRef.current.destroy()
}